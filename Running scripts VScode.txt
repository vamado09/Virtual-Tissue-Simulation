

Step 1: Open Your Project Folder Open the folder containing your scripts by going to File -> Open Folder... and selecting your project folder (script_testing within Virtual Tissue Simulation folder).
VSCode will now display the contents of your project folder.

Step 2: Set Up a Python Environment It's best practice to create a virtual environment for your project to manage dependencies. 
Open the integrated terminal in VSCode by going to Terminal -> New Terminal. 
Create a virtual environment by running:  "python -m venv venv" (this creates a virtual environment called venv in your project directory). 
Activate the virtual environment by running:  "source venv/bin/activate" for MacOS. Your terminal should now indicate that you're working within a virtual environment. 


Step 3: Ensure your requirements.txt file is in the project folder.
#In the terminal, with your virtual environment activated, run "pip install -r requirements.txt" to install the required packages.
Here, you should create a new text file named ".env" within your project's root folder, which is the main folder where your Python scripts and requirements.txt file are located. 
Here's how you do it in VSCode:
In the Explorer panel of VSCode (usually on the left side), right-click on your project folder. Choose "New File" from the context menu. Name the file ".env" and press Enter. 
Make sure it does not have any file extension like .txt. Open the .env file and add your OpenAI API key in the following format:
OPENAI_API_KEY=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
save it.


Step 4: Check the Terminal Open VSCode's integrated terminal by selecting Terminal -> New Terminal from the top menu.

Step 5: Run ko_generation.py 
This script defines the Generator class that the other scripts depend on. Typically, this script doesn't need to be run independently; it's imported by the other scripts. 
But you need to make sure it's error-free and the classes and functions are correctly defined.


(Ruh this one)
# run this one: /opt/homebrew/bin/pip3 install -r "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/requirements.txt"
Step 6: Run populate_db.py 
This script will read the files from your specified input directory and create a vector store for your knowledge objects. In the terminal, make sure you're in the root of your project directory where the populate_db.py script is located. 
Run the script by typing:

# "python populate_db.py path/to/your/input_directory md"
# Replace "path/to/your/input_directory" with the actual path to the directory where your markdown, text, PDF, and HTML files are located. 
# The second argument is the file type you want to process (md for Markdown files, in this case).

# run this one: /opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/populate_db.py" "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/" md

Step 7: Run generate_ko.py After you have created the vector store, you can use generate_ko.py to generate the markdown file for a specific topic. 
In the terminal, execute the generate_ko.py script by typing:

python generate_ko.py vector_store_name "Artistoo"

Here, vector_store_name is the name of the database created by populate_db.py, and "Artistoo" is the subject for the knowledge object you wish to generate. 
Ensure you replace these placeholders with the actual values.

# run this one: /opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/generate_ko.py" "artistoo_vector_store" "Artistoo Knowledge Object"

Replace "Artistoo Knowledge Object" with the actual topic you want to create a knowledge object for. Also, make sure the name of the vector store matches exactly what you used when you saved it in the populate_db.py script.
Check the Output: The generate_ko.py script should generate a markdown file with the content related to the specified topic. Make sure to check the directory mentioned in the script for the output file, which is typically the knowledge_objects directory you've seen being created.

Observation: ValueError: The de-serialization relies loading a pickle file. Pickle files can be modified to deliver a malicious payload that results in execution of arbitrary code on your machine.You will need to set
`allow_dangerous_deserialization` to `True` to enable deserialization. If you do this, make sure that you trust the source of the data. For example, if you are loading a file that you created, and no that no one else has modified the file, then this
is safe to do. Do not set this to `True` if you are loading a file from an untrusted source (e.g., some random site on the internet.).

If you created the vector store using populate_db.py and you're sure it hasn't been altered by anyone else, then you can safely enable deserialization. The safety here is based on the trust that the file was generated by a secure process and
has not been tampered with since it was created. If you're running the scripts locally and the data (in this case, the vector store) was generated by you and your trusted team members without exposure to any external or untrusted sources,
there should be no problem in terms of the security concerns associated with deserialization.
If you are certain that the vector store database is from a trusted source (your own script) and hasn't been exposed to potential tampering, you can allow deserialization as I previously mentioned:

change in generate_ko.py:
from: generator.load_db(db_name)
to: generator.load_db(db_name, allow_deserialization=True)

once this is made: /opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/generate_ko.py" "artistoo_vector_store" "Artistoo Knowledge Object"



TO RUN STUFF ALL OVER AGAIN (YA SABIENDO EL PROCESO):

Por si hay que hacerle el update a los requirments: /opt/homebrew/bin/pip3 install -r "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/requirements.txt"

1. Open Your Project Folder Open the folder containing your scripts by going to File -> Open Folder... and selecting your project folder (script_testing within Virtual_Tissue Simulation folder).
VSCode will now display the contents of your project folder.

2. Set Up a Python Environment It's best practice to create a virtual environment for your project to manage dependencies. 
Open the integrated terminal in VSCode by going to Terminal -> New Terminal. 

# usinf markdown files
3. run to create vector store for topic: /opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/populate_db.py" "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/" md
4. run to generate KO: /opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/generate_ko.py" "artistoo_vector_store" "Artistoo Knowledge Object"

# using txt files:
3. /opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/populate_db.py" "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/" txt 
4. run to generate KO: /opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/generate_ko.py" "artistoo_vector_store" "Artistoo Knowledge Object"

# using pdf files:
3. /opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/populate_db.py" "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/" pdf 
4. run to generate KO: /opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/generate_ko.py" "artistoo_vector_store" "Artistoo Knowledge Object"




TO RUN main.py -> AQUI CREE UN SUBDIRECTORY LLAMADO "input_docs" PARA QUE EL MAIN.PY LO LEA SOLAMENTE

# you want to generate Knowledge Objects for topics "Topic1" and "Topic2", and you want to load new documents and allow deserialization, the command would be:
/opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/main.py" "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/" "Topic1,Topic2" true true

# If you also have an existing database named "artistoo_vector_store", the command becomes:
/opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/main.py" "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/" "Topic1,Topic2" true true artistoo_vector_store

# USE THIS: Starting from scratch USINF SUBDIRECTORY "input_docs":
# CORRE ESTE AUN QUE LOS DOCUMENTOS ESTEN FUERA DEL "input_docs". SOLAMENTE ASI LO LEE
run: /opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/main.py" "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/input_docs/" "Artistoo Simulation Package" true true

/opt/homebrew/bin/python3 "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/main.py" "/Users/deleonv/Desktop/Virtual_Tissue /script_testing/" "Artistoo Simulation Package" true true